// Code generated by "go run generate_decode.go"
// DO NOT EDIT!
// 2023-04-01 20:51:07.154869992 +0800 CST m=+0.000206349
package excel

import (
	"encoding/json"
	"reflect"
)

func sliceDecode(rv reflect.Value, str string) error {
	var err error
	switch v := rv.Interface().(type) {
	case []uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case [][]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case []uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case [][]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case []uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case [][]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case []uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case [][]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case []uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case [][]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case []int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case [][]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case []int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case [][]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case []int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case [][]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case []int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case [][]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case []int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case [][]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case []float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case [][]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case []float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case [][]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case []string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	case [][]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v)))
	default:
		return UnsupportypeErr
	}
	return err
}

func arrayDecode(rv reflect.Value, str string) error {
	var err error
	switch v := rv.Interface().(type) {
	case [0]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [1]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [2]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [3]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [4]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [5]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [6]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [7]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [8]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [9]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [10]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [0]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [1]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [2]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [3]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [4]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [5]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [6]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [7]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [8]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [9]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [10]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [0]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [1]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [2]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [3]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [4]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [5]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [6]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [7]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [8]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [9]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [10]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [0]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [1]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [2]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [3]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [4]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [5]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [6]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [7]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [8]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [9]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [10]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [0]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [1]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [2]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [3]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [4]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [5]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [6]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [7]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [8]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [9]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [10]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [0]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [1]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [2]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [3]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [4]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [5]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [6]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [7]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [8]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [9]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [10]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [0]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [1]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [2]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [3]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [4]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [5]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [6]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [7]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [8]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [9]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [10]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [0]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [1]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [2]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [3]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [4]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [5]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [6]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [7]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [8]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [9]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [10]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [0]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [1]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [2]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [3]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [4]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [5]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [6]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [7]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [8]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [9]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [10]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [0]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [1]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [2]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [3]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [4]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [5]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [6]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [7]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [8]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [9]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [10]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [0]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [1]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [2]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [3]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [4]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [5]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [6]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [7]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [8]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [9]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [10]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [0]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [1]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [2]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [3]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [4]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [5]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [6]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [7]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [8]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [9]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [10]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [0]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [1]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [2]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [3]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [4]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [5]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [6]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [7]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [8]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [9]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case [10]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	default:
		return UnsupportypeErr
	}
	return err
}

func mapDecode(rv reflect.Value, str string) error {
	var err error
	switch v := rv.Interface().(type) {
	case map[uint8]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8][]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8][]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8][]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8][]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8][]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8][]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8][]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8][]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8][]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8][]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8][]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8][]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint8][]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16][]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16][]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16][]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16][]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16][]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16][]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16][]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16][]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16][]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16][]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16][]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16][]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint16][]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32][]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32][]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32][]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32][]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32][]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32][]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32][]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32][]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32][]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32][]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32][]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32][]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint32][]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64][]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64][]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64][]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64][]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64][]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64][]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64][]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64][]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64][]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64][]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64][]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64][]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint64][]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint][]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint][]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint][]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint][]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint][]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint][]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint][]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint][]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint][]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint][]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint][]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint][]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[uint][]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8][]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8][]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8][]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8][]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8][]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8][]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8][]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8][]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8][]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8][]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8][]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8][]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int8][]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16][]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16][]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16][]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16][]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16][]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16][]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16][]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16][]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16][]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16][]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16][]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16][]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int16][]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32][]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32][]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32][]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32][]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32][]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32][]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32][]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32][]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32][]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32][]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32][]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32][]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int32][]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64][]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64][]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64][]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64][]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64][]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64][]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64][]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64][]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64][]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64][]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64][]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64][]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int64][]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int][]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int][]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int][]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int][]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int][]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int][]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int][]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int][]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int][]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int][]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int][]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int][]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[int][]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32][]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32][]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32][]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32][]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32][]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32][]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32][]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32][]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32][]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32][]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32][]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32][]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float32][]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64][]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64][]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64][]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64][]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64][]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64][]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64][]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64][]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64][]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64][]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64][]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64][]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[float64][]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string][]uint8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string][]uint16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string][]uint32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string][]uint64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string][]uint:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string][]int8:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string][]int16:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string][]int32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string][]int64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string][]int:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string][]float32:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string][]float64:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	case map[string][]string:
		err = json.Unmarshal([]byte(str), &v)
		rv.Set(reflect.ValueOf(v))
	default:
		return UnsupportypeErr
	}
	return err
}
