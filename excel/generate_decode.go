//go:build ignore
// +build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"text/template"
	"time"
)

var SliceBaseTypes = func() (result []string) {
	for _, item1 := range []string{"uint8", "uint16", "uint32", "uint64", "uint", "int8", "int16", "int32", "int64", "int", "float32", "float64"} {
		result = append(result, "[]"+item1, "[][]"+item1)
	}
	return
}()

var ArrayBaseTypes = func() (result []string) {
	for _, item1 := range []string{"uint8", "uint16", "uint32", "uint64", "uint", "int8", "int16", "int32", "int64", "int", "float32", "float64"} {
		for index := 0; index <= 100; index++ {
			result = append(result, fmt.Sprintf("[%d]%s", index, item1))
		}
	}
	return
}()

type Data struct {
	GenerateAt    time.Time
	SliceBaseType []string
	ArrayBaseType []string
}

func main() {

	var data = Data{
		GenerateAt:    time.Now(),
		SliceBaseType: SliceBaseTypes,
		ArrayBaseType: ArrayBaseTypes,
	}
	var (
		err        error
		stdFile    *os.File
		tpl        *template.Template
		buff       bytes.Buffer
		formatByte []byte
	)
	stdFile, err = os.OpenFile("decode.go", os.O_CREATE|os.O_RDWR|os.O_TRUNC, 0644)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer stdFile.Close()
	tpl, err = template.New("decode").Parse(tplCommon + tplSliceDecode + tplArrayDeocde)
	err = tpl.Execute(&buff, data)
	if err != nil {
		fmt.Println(err)
		return
	}
	formatByte, err = format.Source(buff.Bytes())
	if err != nil {
		fmt.Println(err)
		return
	}
	stdFile.Write(formatByte)
}

var tplCommon = `// Code generated by "go run generate_decode.go"
// DO NOT EDIT!
// {{ .GenerateAt }}
package excel

import (
	"encoding/json"
	"reflect"
)
`

var tplSliceDecode = `
func sliceDecode(rv reflect.Value, str string) error {
	var err error
	switch v := rv.Interface().(type) { {{range .SliceBaseType}}
			case {{.}}:
				err = json.Unmarshal([]byte(str), &v)
				rv.Set(reflect.AppendSlice(rv, reflect.ValueOf(v))) {{end}}
		default:
			return UnsupportypeErr		
	}
	return err
}
`
var tplArrayDeocde = `
func arrayDecode(rv reflect.Value, str string) error {
	var err error
	switch v := rv.Interface().(type) { {{range .ArrayBaseType}}
			case {{.}}:
				err = json.Unmarshal([]byte(str), &v)
				rv.Set(reflect.ValueOf(v)) {{end}}
	default:
		return UnsupportypeErr
	}
	return err
}
`
